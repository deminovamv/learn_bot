import logging
from os import replace
from telegram import update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import settings
import ephem
from datetime import date, datetime
import re 
import city_game



logging.basicConfig(filename="bot.log", level= logging.INFO)

PROXY = {'proxy_url': settings.PROXY_URL,
    'urllib3_proxy_kwargs': {
        'username': settings.PROXY_USERNAME,
        'password': settings.PROXY_PASSWORD
    }
}

# –£—Ä–æ–≤–µ–Ω—å 2
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—É /wordcount –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Å–ª–æ–≤–∞ –≤ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑–µ. 
# –ù–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ –∑–∞–ø—Ä–æ—Å /wordcount –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å: 3 —Å–ª–æ–≤–∞. 
# –ù–µ –∑–∞–±—É–¥—å—Ç–µ:

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
# –ö–∞–∫ –º–æ–∂–Ω–æ –æ–±–º–∞–Ω—É—Ç—å –±–æ—Ç–∞, –∫–∞–∫–∏–µ –µ—â–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω—ã?


def wordcount(update, context):
    if update.message.text == '/wordcount':
        update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É. '
        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤–≤–µ–¥–∏—Ç–µ: '
        '/wordcount –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞')
    else:
        text_sentence = re.sub(r'[^A-Za-z–ê-–Ø–∞-—è\s]','', update.message.text)
        text_sentence = text_sentence.split()
        if len(text_sentence) == 1 :
            update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–∏–ø–µ–Ω–∞–Ω–∏—è. '
        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤–≤–µ–¥–∏—Ç–µ: '
        '/wordcount –ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞')
        else:
            update.message.reply_text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {len(text_sentence) - 1}')


# –£—Ä–æ–≤–µ–Ω—å 2
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Äú–ö–æ–≥–¥–∞ –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ?‚Äù
#  –ù–∞–ø—Ä–∏–º–µ—Ä /next_full_moon 2019-01-01. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ephem.next_full_moon(–î–ê–¢–ê)


def next_full_moon(update, context):
    if update.message.text == '/next_full_moon':
        update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É. '
        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É –±–ª–∏–∑–∂–∞–π—à–µ–≥–æ –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: '
        '/next_full_moon 01.01.2019')
    else:
        text_date = update.message.text.split()
        st_date = text_date[1]
        for x in ('/','-','_','\\'):
            st_date = st_date.replace('/','.')
        try:
            dt = datetime.strptime(st_date, '%d.%m.%Y')
        except ValueError:
            update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy')
        dt = ephem.next_full_moon(dt)
        dt = datetime.strptime(str(dt), '%Y/%m/%d %H:%M:%S')
        update.message.reply_text('–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ –±—É–¥–µ—Ç: {}'.format(dt.strftime('%d.%m.%Y %H:%M:%S')))



Planet ={
  "Mars": "–ú–∞—Ä—Å",
  "Mercury":"–ú–µ—Ä–∫—É—Ä–∏–π",
  "Venus":"–í–µ–Ω–µ—Ä–∞",
  "Jupiter":"–Æ–ø–∏—Ç–µ—Ä",
  "Saturn":"–°–∞—Ç—É—Ä–Ω",
  "Uranus":"–£—Ä–∞–Ω",
  "Neptune":"–ù–µ–ø—Ç—É–Ω",
  "Pluto":"–ü–ª—É—Ç–æ–Ω",
  "Sun":"–°–æ–ª–Ω—Ü–µ",
  "Moon":"–õ—É–Ω–∞"
}

def get_key(d, value):
    value = value.capitalize()
    for k, v in d.items():
        if v == value or k == value:
            return (k)

def name_planet(update, context):
    print(f'/planet')
    text = update.message.text.split()
    if len(text) == 1:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã')
    else:
        # try:
             planet_name = text[1]
             if 'text' not in text:
                 key_planet = get_key(Planet,planet_name)
                 if key_planet:
                     planet_name = key_planet
             m = getattr(ephem, planet_name, 'error')
             if m == 'error':
                 update.message.reply_text('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')   
             else:
                 update.message.reply_text(f'Planet: {planet_name}')
                 m = m(date.today())
                 constellation = ephem.constellation(m)
                 update.message.reply_text(f'Date: {date.today()}')
                 update.message.reply_text(f'Constellation: {constellation[1]}')
        # except(AttributeError,TypeError):
            # update.message.reply_text('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')



def greet_user(update, context):
    print(f'/start')
    name = update.message.chat.first_name
    update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {name} üòä!')

    
def talk_to_me(update, context):
    text= update.message.text
    print(text)
    key_planet = get_key(Planet,text)
    if key_planet:
        update.message.text = 'text ' + key_planet
        name_planet(update, context)
    else:
        update.message.reply_text(text)

def main():
    mybot= Updater(settings.API_KEY, use_context= True, request_kwargs= PROXY)

    dp =  mybot.dispatcher
    dp.add_handler(CommandHandler("start", greet_user))    
    dp.add_handler(CommandHandler("planet", name_planet))
    dp.add_handler(CommandHandler("wordcount", wordcount))
    dp.add_handler(CommandHandler("cities", city_game.user_city_game))
    dp.add_handler(CommandHandler("next_full_moon", next_full_moon))
    dp.add_handler(MessageHandler(Filters.text, talk_to_me))

    logging.info('START')
    mybot.start_polling()
    mybot.idle()

if __name__ == '__main__':
    main()
    